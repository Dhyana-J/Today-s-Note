
@예외처리

-예외의 종류
-예외가 뭐져?
-예외처리 왜하는거야?
-예외처리 방법


 * 에러의 종류
  -시스템 에러 : 컴퓨터 오작동으로 발생. 소스코드로 해결할 수 없다! 어마무시심각한 에러
  -컴파일 에러 : 소스코드 문법상 오류 --> 빨간줄로 애초에 알려준다. 
  -런타임 에러 : 코드상으로는 문제가 없지만, 프로그램을 실행하면 발생하는 에러 (사용자가 input을 잘못주거나 할 때)
  -논리 에러 : 문법상으로 문제 없고, 실행했을 때도 굳이 문제가 안되지만, 프로그램 의도상 맞지 않는것

 *우리는 시스템 에러를 제외한 컴파일에러, 런타임에러, 논리에러와 같은 비교적 덜 심각한 것들을 가지고 작업한다.
  => 이런 것들을 "예외"라고 한다. -->Exception

 * 이런 예외들이 "발생"했을 경우에 대해 "처리"하는 방법 -> "예외처리"
 * 예외처리 안하면 어떻게될까? -> 프로그램 실행했을 때 예외발생하면 비정상종료! 


 $ CheckedException & UnCheckedException
  $Unchecked (예외처리 해도되고 안해도되고)
   -RuntimeException (프로그램실행 중 발생하는 예외)
	-> NullPointerException, Arithmetic~, NegativeArraySize~, ArrayIndexOutOfBounds~, ClassCast~
  $Checked (예외처리 필수! Checked!) 
   -IOException (컴파일중 발생하는 예외)(빨간줄로 알려준다)


*예외 try catch 구문 기술할 때 유의사항.
catch문이 여러개일 경우, 
예외가 발생하면 먼저번 catch문에 exception이 해당될 경우 해당 catch문 실행되고 그 뒤 catch문은 무시된다.
그러므로, catch문은 exception 클래스에서 자식이 먼저 오도록 하자. 자식->부모 순으로 catch문 작성하자. 


*예외발생 시 내용 출력
printStackTrace() > toString() > getMessage() 순으로 자세한 예외 정보를 출력해준다. 


* Exception throws 하는 메소드 오버라이딩시 주의!
부모클래스에 Exception을 throws 하는 메소드가 있다면, 자식클래스에서 해당 메소드를 오버라이딩 할 때, 
해당 메소드가 throws하는 exception 개수와는 상관 없이 해당 exception과 같거나 그 후손인 exception들을 throws해야만 한다. 

main()에서조차 throws하면 결국 jvm이 처리해주기는 한다.
