<KH>

@단일상속, 다중상속
단일상속 : 하나의 부모클래스만 상속 가능. extends a1, a2 이런거 못함
다중상속 : extends a1,a2 이런거 가능

@객체의 equals

Book bk1 = new Book("수학의 정석", "나수학", 10000);
Book bk2 = new Book("수학의 정석", "나수학", 10000);

bk1 == bk2 => false
bk1.equals(bk2) => false

둘 다 false다. 

왜냐?? 

.equals는 Object 클래스의 메소드인데 안에 뜯어보면 
this == obj 이런 식으로 또 주소값비교를 한다. 그래서 false가 뜸.

public boolean equals(Object obj) {
        return (this == obj);
    }

이렇게말이지요. 

주소값이 아닌 필드값을 비교하도록 하려면, override 해줘야한다.

	@Override
	public boolean equals(Object obj) {

		double a = 2.5;
		int b = 0;
		b = (int)a; 
		a = (int)a; -> double a를 int로 바꾼 후, 다시 double a에 넣는다.  
		System.out.println("b는 " + b);
		
		obj = (Book)obj; ->안되는 이유? obj를 Book으로 형변환 후, 다시 Object형에 넣는다. 그래서 안된다!
		Book other = (Book)obj;
		
		return this.information().equals(other.information());
		
	}

** 어느 경우에 동일 객체라고 하나요? 
-> 객체들의 주소값인 해쉬코드와 필드값 둘 다 같은 경우 동일 객체에요. 그니까 주소값과 내용물이 다 같아야해요

그래서 equals()를 오버라이딩 해주려면 hashCode()도 오버라이딩 같이 해줘야한다. 필드값과 주소값 같이 비교하도록 하기 위해. 


** equals()는 언제쓰나요?
String간 값 비교할 때, 
객체간에 주소값 비교할 때 쓰인다.

String클래스에서 이미 Object클래스의 equals()메소드를 override 해놨기 때문에, String간 비교는 필드값비교가 이루어지는 것이다.


** 자바 method중 native으로 만들어진건 C언어기반이라 내용을 까볼 수가 없다. 주소를 다루는거라 그런듯하다.



@ 다형성! (Polymorphism)

상속관계에서, 부모타입의 자료형에 자식 객체를 생성하는 것.(UpCasting)
ex) Parent a = new Child();
a를 통해 Child 메소드를 사용하기 위해서는 ((Child)a).자식메소드() 이런식으로 명시적 형변환 필요. (DownCasting)

**객체배열을 만든다면, 각 인덱스에 다양한 자식들의 객체를 담을 수 있는 치트키!
arr[0].printParent();
arr[1].printParent(); 

*** instanceof
어떤 클래스의 인스턴스야? 하고 묻는 연산자.
ex) porsche instanceof Vehicle -> porsche가 Vehicle의 인스턴스니? ->true 반환
    coffe instanceof Vehicle -> coffe가 Vehicle의 인스턴스니? -> false 반환

*** instanceof 어쩔 때 쓰여요??
부모의 객체배열을 만들고 다양한 객체를 담았을 때, 
Vehicle[] v = new Vehicle[100000];
Vehicle[0] v = new Car();
Vehicle[1] v = new Boat();
....

부모클래스 메소드를 오버라이딩 하지 않고, 각 자식클래스 객체의 메소드를 사용하기 위해서는 
그 객체에 맞는 메소드를 수행하도록 DownCasting이 필요하다.

반복문을 통해 Car와 Boat....등의 객체를 가려낸 후 DownCasting해서 메소드를 수행해줘야한다.
for(int i = 0; i<v.length; i++){
	if(Vehicle[i] instanceof Car)
		실행될 해당 자식클래스의 메소드(DownCasting 필요)
	if(Vehicle[i] instanceof Boat)
		실행될 해당 자식클래스의 메소드(DownCasting 필요)
}

위의 예시는, 각 자식클래스의 메소드 실행을 위해 그에 맞게 형변환을 해줘야하기 때문에 나타난 것이다.

***형변환 안하고 편하게 자식클래스 실행하는 방법이 없을까?
있다!
"동적바인딩"을 활용하면 된다.

자식클래스에서, 부모클래스의 메소드를 오버라이딩 하는 경우, 
형변환 없이도 자식클래스 메소드 실행이 가능하다. 