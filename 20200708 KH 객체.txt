
<KH>

@객체지향프로그래밍 OOP (Object Oriented Programming)


*객체가 뭘까?

인간이 인식하는 것들 모든 것을 객체라고 할 수 있다. 

인간은 현실세계의 사물(컴퓨터, 텀블러, 냄비, 자동차 등)이나 개념(조건반사이론, 양자역학, 물리학, ...)같은 추상적인것 까지도 각각 독립된 객체로 보았다.

현실세계에서 발생하는 모든 사건들은 이러한 객체들이 관계를 맺고 상호작용하는 것으로 볼 수 있다.

그 객체들을 프로그래밍이라는 것을 통해 컴퓨터로 옮겨놓는 것이 객체지향 프로그래밍. 

프로그래밍은 현실세계의 모든 것을 가능한 한 컴퓨터에 옮겨 놓는 것을 의미한다. (분명 현실은 굉장히 복잡해서 한계는 명확하지만.)


현실 세계에서의 객체는 다른 객체들과 구분될 수 있다. 즉, 독립적으로 존재하는 것들이다.

어떻게 구분되냐?

자신 고유의 특성 (속성 = 값 = data)를 가지고, 기능(동작 = 행동)을 한다. 따라서 서로 구분되는 행위의 결과를 만들어낸다.

물리(속성) 학(배우는 행동)
심리(속성) 학(배우는 행동) 이런 개념류는 객체화하기 좀 애매하기도하다..

자동(움직이는 기능) 차(수레.)
자전(움직이는 기능) 거(수레.)

카테고리별로 공통된 속성과 기능을 공유하면서도 서로 다른 속성과 기능을 가진 객체들이 있을 수도 있다.

물리학을 예로 들면, 고전물리학 양자역학, 상대성이론, 양자끈이론 등... 

자동차를 예로 들면, 스포츠카, 슈퍼카, 세단, suv, 자율주행차, 전기차 등.. 

이와 같이 세밀화해 구분지을 수 있다.


*JAVA에서 객체는? (java 자체의 관점에서)

new 연산자를 통해 메모리 영역에 생성된 것을 의미한다. (클래스에 정의된 내용대로 메모리에 할당된 결과물)

이 객체를 생성하기 위해서는 클래스라는 개념이 필요하다. 


*클래스? 

객체를 생성하기 위해 만들어진 개념! 

객체의 특징과 기능(속성과 메소드)을 정의한 것이다.

객체화 하고싶은 대상이 갖는 공통된 특성, 행위를 추상화(단순화)해서 모아놓은 것. 


*추상화 왜해요? 디테일 떨어지잖아요!

유연성을 위해서 구체적인건 포기한다. 

아무래도 현실세계를 컴퓨터에 옮기는 것이다보니 한계가 있기 때문이다. 

자동차 묘사하는데 철판에 바퀴 네 개 달렸다하면 얼마나 편해

근데 안에 엔진 실린더 어쩌구 점화플러그 어쩌구 변속기 클러치 변속기오일 어쩌구 재질이 어쩌구 원자 분자하면 때려치고싶겠지?

이런 디테일 하나하나 따지다보면, 프로그램이 굉장히 복잡해지고, 사람도 머리아파진다. 

그래서 프로그램에 필요한 공통된 특성을 객체에서 추출하고, 불필요한 공통 특성을 제거하는 과정이다. (이 과정에서 현실세계의 정보가 상당부분 잘려나감 이건 기술의 한계..)


*캡슐화?

추상화를 통해서 정리된 객체의 특성과 기능 (데이터와 기능)을 하나로 묶어서 관리하는방법이다.

클래스 외부에서 클래스에 존재하는 데이터에 직접 접근하는것을 막고, (외부에서 내부 정보 안보임. = 정보은닉)

대신 클래스 내부에 데이터를 처리하는 함수를 정의해서, 이 함수(method)를 통해 외부에서 내부 데이터에 접근할 수 있도록 하는 방법이다.

캡슐화 원칙 : 

	클래스멤버변수는 private으로!
	클래스 멤버변수 연산처리하는 함수를 클래스 내부에 작성!
	멤버 함수는 public으로 설정!(클래스 밖에서 써야하니까)



@객체의 정보를 보관하는 클래스를 ValueObject (VO)클래스라고 한다.

************getter나 setter는 반드시!!!!**********

setName()
getName() 이런식으로 set 또는 get + 낙타표기법 관례.

그리고 필드명과 매개변수는 일치시켜주는 것이 관례. 

그래서 this.name 이런식으로 사용할 수 있게.








 

