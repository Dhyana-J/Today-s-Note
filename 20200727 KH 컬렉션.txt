<KH>

// 컬렉션? 자료구조가 내장되어있는 클래스. 자바에서 제공하는 "자료구조"를 담당하는 framework이다
// 자료구조? 방대한 데이터를 효율적으로 (구조적으로) 다룰 때 필요한 개념이 자료구조이다.
// 프레임워크? 자바에서 이미 제공되고 있는 틀이 있기 때문에 편리하게 갖다 쓰라는 개념이다.
		
// 배열의 특징(단점)
// 1. 배열을 사용하기 위해 반드시 크기 지정이 필요했다.
//   -> 한번 지정된 배열 크기 변경 불가한 문제.
//   -> 배열 크기를 너무 크게잡아두면 메모리낭비.
		
// 2. 배열의 데이터를 차곡차곡 추가하는 것은 문제가 없으나, 중간에 데이터 껴넣고싶다면?
// 		-> 데이터를 하나하나 다 뒤로 밀어내고 남은곳에 넣어야함. 게다가 밀었는데 배열 길이 모자라면 오버플로우 문제!
		
// 3. 배열 하나당 딱 하나의 데이터 타입만 지정이 가능하다. 그래서 하나의 배열에 다양한 데이터타입을 담을 수 없다. ( int, double, Person객체 ...)
		
/*
 * * 이런 배열의 모든 단점을 보완한 개념이 바로 컬렉션이다. 컬렉션의 장점?
 *  1. 크기를 지정해줄 필요도 없다.
 *  2. 추가, 삭제, 정렬 등의 기능 처리가 내장되어있어 간단하게 해결된다. 따로 알고리즘을 구현하지 않아도 된다. (자료구조 내장되어있음)
 *  3. 여러 타입의 데이터가 저장 가능하다. 어떠한 타입이든지 다 담을 수 있다. (객체의 형태만 저장이 가능하다.)
 *  	-> 객체만 저장할 수 있는데, 기본 자료형을 저장하고 싶은 경우? Wrapper클래스를 사용하면 된다.
 *  
 *   * 방대한 데이터들을 관리할 때 삭제나 추가, 수정, 정렬 등의 기능들이 많이 필요할 경우 "컬렉션"을 사용하는 것이 용이.
 *   * 데이터들을 보관하고 값을 조회하는 것만 하는 경우(값의 변경이 빈번하지 않을 때), 배열을 사용하는 것이 용이하다.
 *  
 */


@컬렉션

컬렉션?
-> 자료구조가 내장되어있는 하나의 클래스이다. 자바에서 제공하는 "자료구조"담당 framework라고 생각하면 된다.

배열의 단점을 커버한다. 
(자료 추가 용이, 자료형 다양하게 다룰 수 있음)

객체만 담을 수 있다! primitive type은 Wrapper클래스 사용해서 저장한다.

Q. 하지만 성능면에선 어떨지? 배열보다 좀 더 느리지 않을까?

---
컬렉션은 List와 Set으로 나뉜다. 이 외에도 Map이라는 것이 있다. 

*List
-> 자료들을 순차적으로 나열한 자료구조. 인덱스로 관리된다. 중복해서 객체를 저장할 수 있다. 이 자료구조를 구현한 클래스로 ArrayList, Vector, LinkedList가 있다.

*ArrayList vs LinkdeList
ArrayList는 배열베이스, LinkedList는 각 분리저장된 값들을 서로 참조값으로 연결해놓은듯.
LinkedList는 새로운 객체 삭제하거나 추가할 때는 보다 용이. 검색할땐 딸림.

*ArrayList vs Vector
Vector는 자바에서 권장하지 않는다.
Vector가 성능 저하를 야기할 수 있어 ArrayList가 나타났다!
Vector - 동기화를 제공한다. (멀티스레드 동기화. 단일스레드에서는 성능저하)
ArrayList - 동기화를 제공하지 않는다.

---

*제네릭스(Generics)
ArrayList<Object> list = new ArrayList<Object>(); 
이렇게 어떤 자료형의 객체들을 넣을지 <> 안에 정의해주는 것을 제네릭이라고한다.
명시된 타입의 객체만 저장하도록 제한을 둘 수 있다.
해당 컬렉션에 저장된 객체를 꺼내서 사용할 때, 매번 형변환할 필요 없도록 해준다.

---
MVC모델 복습
Model : 데이터 처리하는 역할 담당
View : 말 그대로 사용자가 보게되는 화면. 시각적인 요소 담당한다. 입력 및 출력 담당
Controller : 사용자의 요청을 처리해주는 역할 담당




