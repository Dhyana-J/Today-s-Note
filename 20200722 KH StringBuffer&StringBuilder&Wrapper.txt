<KH>

@StringBuffer와 StringBuilder

왜 필요한가!?

/*
	 * String 클래스  == 불변클래스(그자리에서 값이 변경되는게 아닌 개념)
	 * --> 빈번한 값을 변경할 경우 GC가 계속 기존의 값들을 지워줘야되는 단점
	 * --> 변경이 적고 읽기만 할 경우 String 클래스가 용이
	 * 
	 * String 클래스를 변경을 많이 해줘야하는 값에 사용한다면, heap에 garbage가 넘쳐나서 성능에 타격을 줄 수 있다.
	 * 
	 * 이러한 문제점을 해결하기 위해 가변클래스 StringBuilder, StringBuffer를 사용할 수 있다. 
	 * *StringBuilder, StringBuffer == 가변클래스 (그 자리에서 값이 변경되는 개념)
	 *  - StringBuilder, StringBuffer 모두 생성자나 제공하고 있는 메소드가 동일하다.
	 *  - 유일한 차이점은 동기화가 되냐 안되냐의 차이다.--> 곧, 속도 차이
	 *  
	 *  > StringBuilder = 동기화 제공 안함
	 *  > StringBuffer = 동기화 제공 함
	 *  
	 *  멀티스레드 환경에서(여러개의 일처리를 병행해 동시다발적으로 수행) 동기화처리가 되어야 안전하므로, StringBuffer권장
	 *  단일스레드 환경에서는 StringBuilder 권장 (동기화 작업 시 속도저하 발생 가능) 
	 *  
	 */


*클래스 메소드의 반환형이 호출할 때의 클래스 자료형과 같다면, 연이어서 클래스 메소드 호출이 가능하다.

StringBuilder sb = new StringBuilder("반가워!");
sb.reverse().append("method Chainning").insert(11, "호호홓").delete(4, 7); //method chain


@Wrapper클래스

-> 기본 자료형(primitive type)을 객체로 포장해주는 클래스가 Wrapper클래스이다.

(primitive)      (Wrapper)
boolean <--> Boolean
char	<--> Character
byte	<--> Byte
short	<--> Short
int	<--> Integer
long	<--> Long
foat	<--> Float
double	<--> Double 

- 기본자료형으로 사용해도 되지만, 프로그램에 따라 해당 기본자료형을 객체로 취급해야 하는 경우가 있다.
 ex) 메소드 호출해야 될 때
     메소드의 매개변수로 기본자료형이 아닌 객체 타입만이 요구될 때
     다형성을 적용시키고 싶을 때

 기본자료형을 Wrapper클래스로 변환해주는 것을 Boxing이라고 한다. 박스로 싸매~


*문자열을 기본자료형으로 바꿔주는 방법

Wrapper클래스.parse클래스( ) 사용하면 된다.

String str1 = "10";
String str2 = "15.3";
int i1 = Integer.parseInt(str1);
double i2 = Double.parseDouble(str2);

이런 식으로 해주면 된다. 
문자열을 기본자료형으로 바꿔주는것을 Parsing 이라고도 한다.
앞으로 파싱은 굉장히 많이 쓰일 것이다. 